// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: accounts.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO "Accounts" ("Id", "UserName", "FirstName", "LastName", "Email", "PasswordHash", "DateOfBirth", "RoleId", "CreatedAt", "CreatedBy")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING "Id", "UserName", "FirstName", "LastName", "Email", "PasswordHash", "DateOfBirth", "RoleId", "IsMailVerified", "IsLocked", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy"
`

type CreateAccountParams struct {
	Id           uuid.UUID          `json:"Id"`
	UserName     string             `json:"UserName"`
	FirstName    pgtype.Text        `json:"FirstName"`
	LastName     pgtype.Text        `json:"LastName"`
	Email        string             `json:"Email"`
	PasswordHash pgtype.Text        `json:"PasswordHash"`
	DateOfBirth  pgtype.Text        `json:"DateOfBirth"`
	RoleId       uuid.UUID          `json:"RoleId"`
	CreatedAt    pgtype.Timestamptz `json:"CreatedAt"`
	CreatedBy    pgtype.Text        `json:"CreatedBy"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.Id,
		arg.UserName,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PasswordHash,
		arg.DateOfBirth,
		arg.RoleId,
		arg.CreatedAt,
		arg.CreatedBy,
	)
	var i Account
	err := row.Scan(
		&i.Id,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.DateOfBirth,
		&i.RoleId,
		&i.IsMailVerified,
		&i.IsLocked,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM "Accounts" WHERE "Id" = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
SELECT "Id", "UserName", "FirstName", "LastName", "Email", "PasswordHash", "DateOfBirth", "RoleId", "IsMailVerified", "IsLocked", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy" FROM "Accounts"
WHERE "Email" = $1 LIMIT 1
`

func (q *Queries) GetAccountByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByEmail, email)
	var i Account
	err := row.Scan(
		&i.Id,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.DateOfBirth,
		&i.RoleId,
		&i.IsMailVerified,
		&i.IsLocked,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getAccountById = `-- name: GetAccountById :one
SELECT "Id", "UserName", "FirstName", "LastName", "Email", "PasswordHash", "DateOfBirth", "RoleId", "IsMailVerified", "IsLocked", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy" FROM "Accounts" WHERE "Id" = $1 LIMIT 1
`

func (q *Queries) GetAccountById(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.Id,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.DateOfBirth,
		&i.RoleId,
		&i.IsMailVerified,
		&i.IsLocked,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getAccountByUsername = `-- name: GetAccountByUsername :one
SELECT "Id", "UserName", "FirstName", "LastName", "Email", "PasswordHash", "DateOfBirth", "RoleId", "IsMailVerified", "IsLocked", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy" FROM "Accounts"
WHERE "UserName" = $1 LIMIT 1
`

func (q *Queries) GetAccountByUsername(ctx context.Context, username string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByUsername, username)
	var i Account
	err := row.Scan(
		&i.Id,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.DateOfBirth,
		&i.RoleId,
		&i.IsMailVerified,
		&i.IsLocked,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getAllAccounts = `-- name: GetAllAccounts :many
SELECT "Id", "UserName", "FirstName", "LastName", "Email", "PasswordHash", "DateOfBirth", "RoleId", "IsMailVerified", "IsLocked", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy" FROM "Accounts"
`

func (q *Queries) GetAllAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, getAllAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.Id,
			&i.UserName,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PasswordHash,
			&i.DateOfBirth,
			&i.RoleId,
			&i.IsMailVerified,
			&i.IsLocked,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pagedAccounts = `-- name: PagedAccounts :many
SELECT "Id", "UserName", "FirstName", "LastName", "Email", "PasswordHash", "DateOfBirth", "RoleId", "IsMailVerified", "IsLocked", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy" FROM "Accounts"
ORDER BY "CreatedAt"
LIMIT $1
OFFSET $2
`

type PagedAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) PagedAccounts(ctx context.Context, arg PagedAccountsParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, pagedAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.Id,
			&i.UserName,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PasswordHash,
			&i.DateOfBirth,
			&i.RoleId,
			&i.IsMailVerified,
			&i.IsLocked,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE "Accounts"
SET 
  "UserName" = COALESCE($1, "UserName"),
  "FirstName" = COALESCE($2, "FirstName"),
  "LastName" = COALESCE($3, "LastName"),
  "Email" = COALESCE($4, "Email"),
  "PasswordHash" = COALESCE($5, "PasswordHash"),
  "DateOfBirth" = COALESCE($6, "DateOfBirth"),
  "RoleId" = COALESCE($7, "RoleId"),
  "UpdatedAt" = COALESCE($8, "UpdatedAt"),
  "UpdatedBy" = COALESCE($9, "UpdatedBy"),
  "IsMailVerified" = COALESCE($10, "IsMailVerified"),
  "IsLocked" = COALESCE($11, "IsLocked")
WHERE "Id" = $12
RETURNING "Id", "UserName", "FirstName", "LastName", "Email", "PasswordHash", "DateOfBirth", "RoleId", "IsMailVerified", "IsLocked", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy"
`

type UpdateAccountParams struct {
	Username       pgtype.Text        `json:"username"`
	Firstname      pgtype.Text        `json:"firstname"`
	Lastname       pgtype.Text        `json:"lastname"`
	Email          pgtype.Text        `json:"email"`
	Passwordhash   pgtype.Text        `json:"passwordhash"`
	Dateofbirth    pgtype.Text        `json:"dateofbirth"`
	Roleid         pgtype.UUID        `json:"roleid"`
	Updatedat      pgtype.Timestamptz `json:"updatedat"`
	Updatedby      pgtype.Text        `json:"updatedby"`
	Ismailverified pgtype.Bool        `json:"ismailverified"`
	Islocked       pgtype.Bool        `json:"islocked"`
	ID             uuid.UUID          `json:"id"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccount,
		arg.Username,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Passwordhash,
		arg.Dateofbirth,
		arg.Roleid,
		arg.Updatedat,
		arg.Updatedby,
		arg.Ismailverified,
		arg.Islocked,
		arg.ID,
	)
	var i Account
	err := row.Scan(
		&i.Id,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.DateOfBirth,
		&i.RoleId,
		&i.IsMailVerified,
		&i.IsLocked,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
