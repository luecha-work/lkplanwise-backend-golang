// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: accounts.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const deleteAccountByID = `-- name: DeleteAccountByID :exec
DELETE FROM public.accounts
WHERE id = $1
`

func (q *Queries) DeleteAccountByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAccountByID, id)
	return err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, username, firstname, lastname, email, date_of_birth, created_at, created_by, updated_at, updated_by
FROM public.accounts
WHERE id = $1
LIMIT 1
`

type GetAccountByIDRow struct {
	ID          uuid.UUID      `json:"id"`
	Username    string         `json:"username"`
	Firstname   sql.NullString `json:"firstname"`
	Lastname    sql.NullString `json:"lastname"`
	Email       sql.NullString `json:"email"`
	DateOfBirth sql.NullTime   `json:"date_of_birth"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	CreatedBy   sql.NullString `json:"created_by"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
	UpdatedBy   sql.NullString `json:"updated_by"`
}

func (q *Queries) GetAccountByID(ctx context.Context, id uuid.UUID) (GetAccountByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getAccountByID, id)
	var i GetAccountByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getAccountByUsername = `-- name: GetAccountByUsername :one
SELECT id, username, firstname, lastname, email, date_of_birth, created_at, created_by, updated_at, updated_by
FROM public.accounts
WHERE username = $1
LIMIT 1
`

type GetAccountByUsernameRow struct {
	ID          uuid.UUID      `json:"id"`
	Username    string         `json:"username"`
	Firstname   sql.NullString `json:"firstname"`
	Lastname    sql.NullString `json:"lastname"`
	Email       sql.NullString `json:"email"`
	DateOfBirth sql.NullTime   `json:"date_of_birth"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	CreatedBy   sql.NullString `json:"created_by"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
	UpdatedBy   sql.NullString `json:"updated_by"`
}

func (q *Queries) GetAccountByUsername(ctx context.Context, username string) (GetAccountByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getAccountByUsername, username)
	var i GetAccountByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getAccountsByRole = `-- name: GetAccountsByRole :many
SELECT a.id, a.username, a.firstname, a.lastname, a.email, a.password_hash, a.date_of_birth, a.created_at, a.created_by, a.updated_at, a.updated_by FROM public.accounts a
JOIN public.account_roles ar ON a.id = ar.account_id
WHERE ar.role_id = $1
`

func (q *Queries) GetAccountsByRole(ctx context.Context, roleID uuid.UUID) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccountsByRole, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Firstname,
			&i.Lastname,
			&i.Email,
			&i.PasswordHash,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAccount = `-- name: InsertAccount :exec
INSERT INTO public.accounts (
  username, firstname, lastname, email, password_hash, date_of_birth, created_at, created_by
) VALUES (
  $1, $2, $3, $4, $5, $6, NOW(), $7
)
`

type InsertAccountParams struct {
	Username     string         `json:"username"`
	Firstname    sql.NullString `json:"firstname"`
	Lastname     sql.NullString `json:"lastname"`
	Email        sql.NullString `json:"email"`
	PasswordHash sql.NullString `json:"password_hash"`
	DateOfBirth  sql.NullTime   `json:"date_of_birth"`
	CreatedBy    sql.NullString `json:"created_by"`
}

func (q *Queries) InsertAccount(ctx context.Context, arg InsertAccountParams) error {
	_, err := q.db.ExecContext(ctx, insertAccount,
		arg.Username,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.PasswordHash,
		arg.DateOfBirth,
		arg.CreatedBy,
	)
	return err
}

const listAllAccounts = `-- name: ListAllAccounts :many
SELECT id, username, firstname, lastname, email, date_of_birth, created_at, created_by, updated_at, updated_by
FROM public.accounts
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListAllAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListAllAccountsRow struct {
	ID          uuid.UUID      `json:"id"`
	Username    string         `json:"username"`
	Firstname   sql.NullString `json:"firstname"`
	Lastname    sql.NullString `json:"lastname"`
	Email       sql.NullString `json:"email"`
	DateOfBirth sql.NullTime   `json:"date_of_birth"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	CreatedBy   sql.NullString `json:"created_by"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
	UpdatedBy   sql.NullString `json:"updated_by"`
}

func (q *Queries) ListAllAccounts(ctx context.Context, arg ListAllAccountsParams) ([]ListAllAccountsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAllAccountsRow{}
	for rows.Next() {
		var i ListAllAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Firstname,
			&i.Lastname,
			&i.Email,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE public.accounts
SET username = $2, firstname = $3, lastname = $4, email = $5, password_hash = $6, date_of_birth = $7, updated_at = NOW(), updated_by = $8
WHERE id = $1
`

type UpdateAccountParams struct {
	ID           uuid.UUID      `json:"id"`
	Username     string         `json:"username"`
	Firstname    sql.NullString `json:"firstname"`
	Lastname     sql.NullString `json:"lastname"`
	Email        sql.NullString `json:"email"`
	PasswordHash sql.NullString `json:"password_hash"`
	DateOfBirth  sql.NullTime   `json:"date_of_birth"`
	UpdatedBy    sql.NullString `json:"updated_by"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.ExecContext(ctx, updateAccount,
		arg.ID,
		arg.Username,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.PasswordHash,
		arg.DateOfBirth,
		arg.UpdatedBy,
	)
	return err
}
