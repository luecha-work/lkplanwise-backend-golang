// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: accounts.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO "Accounts" ("Id", "UserName", "FirstName", "LastName", "Email", "PasswordHash", "DateOfBirth", "RoleId", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING "Id", "UserName", "FirstName", "LastName", "Email", "PasswordHash", "DateOfBirth", "RoleId", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy"
`

type CreateAccountParams struct {
	Id           uuid.UUID          `json:"Id"`
	UserName     pgtype.Text        `json:"UserName"`
	FirstName    pgtype.Text        `json:"FirstName"`
	LastName     pgtype.Text        `json:"LastName"`
	Email        pgtype.Text        `json:"Email"`
	PasswordHash pgtype.Text        `json:"PasswordHash"`
	DateOfBirth  pgtype.Date        `json:"DateOfBirth"`
	RoleId       uuid.UUID          `json:"RoleId"`
	CreatedAt    pgtype.Timestamptz `json:"CreatedAt"`
	UpdatedAt    pgtype.Timestamptz `json:"UpdatedAt"`
	CreatedBy    pgtype.Text        `json:"CreatedBy"`
	UpdatedBy    pgtype.Text        `json:"UpdatedBy"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.Id,
		arg.UserName,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PasswordHash,
		arg.DateOfBirth,
		arg.RoleId,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i Account
	err := row.Scan(
		&i.Id,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.DateOfBirth,
		&i.RoleId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM "Accounts" WHERE "Id" = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const getAccountById = `-- name: GetAccountById :one
SELECT "Id", "UserName", "FirstName", "LastName", "Email", "PasswordHash", "DateOfBirth", "RoleId", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy" FROM "Accounts" WHERE "Id" = $1
`

func (q *Queries) GetAccountById(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.Id,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.DateOfBirth,
		&i.RoleId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getAllAccounts = `-- name: GetAllAccounts :many
SELECT "Id", "UserName", "FirstName", "LastName", "Email", "PasswordHash", "DateOfBirth", "RoleId", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy" FROM "Accounts"
`

func (q *Queries) GetAllAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, getAllAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.Id,
			&i.UserName,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PasswordHash,
			&i.DateOfBirth,
			&i.RoleId,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE "Accounts"
SET "UserName" = $2, "FirstName" = $3, "LastName" = $4, "Email" = $5, "PasswordHash" = $6, "DateOfBirth" = $7, "RoleId" = $8, "UpdatedAt" = $9, "UpdatedBy" = $10
WHERE "Id" = $1
RETURNING "Id", "UserName", "FirstName", "LastName", "Email", "PasswordHash", "DateOfBirth", "RoleId", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy"
`

type UpdateAccountParams struct {
	Id           uuid.UUID          `json:"Id"`
	UserName     pgtype.Text        `json:"UserName"`
	FirstName    pgtype.Text        `json:"FirstName"`
	LastName     pgtype.Text        `json:"LastName"`
	Email        pgtype.Text        `json:"Email"`
	PasswordHash pgtype.Text        `json:"PasswordHash"`
	DateOfBirth  pgtype.Date        `json:"DateOfBirth"`
	RoleId       uuid.UUID          `json:"RoleId"`
	UpdatedAt    pgtype.Timestamptz `json:"UpdatedAt"`
	UpdatedBy    pgtype.Text        `json:"UpdatedBy"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccount,
		arg.Id,
		arg.UserName,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PasswordHash,
		arg.DateOfBirth,
		arg.RoleId,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	var i Account
	err := row.Scan(
		&i.Id,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.DateOfBirth,
		&i.RoleId,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
