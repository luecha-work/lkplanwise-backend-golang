// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: account_roles.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getAccountRolesByAccountId = `-- name: GetAccountRolesByAccountId :many
SELECT account_id, role_id, created_at, updated_at, created_by, updated_by FROM public.account_roles WHERE account_id = $1
`

func (q *Queries) GetAccountRolesByAccountId(ctx context.Context, accountID uuid.UUID) ([]AccountRole, error) {
	rows, err := q.db.QueryContext(ctx, getAccountRolesByAccountId, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AccountRole{}
	for rows.Next() {
		var i AccountRole
		if err := rows.Scan(
			&i.AccountID,
			&i.RoleID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountRolesByRoleId = `-- name: GetAccountRolesByRoleId :many
SELECT account_id, role_id, created_at, updated_at, created_by, updated_by FROM public.account_roles WHERE role_id = $1
`

func (q *Queries) GetAccountRolesByRoleId(ctx context.Context, roleID uuid.UUID) ([]AccountRole, error) {
	rows, err := q.db.QueryContext(ctx, getAccountRolesByRoleId, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AccountRole{}
	for rows.Next() {
		var i AccountRole
		if err := rows.Scan(
			&i.AccountID,
			&i.RoleID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAccountRoles = `-- name: GetAllAccountRoles :many
SELECT account_id, role_id, created_at, updated_at, created_by, updated_by FROM public.account_roles
`

func (q *Queries) GetAllAccountRoles(ctx context.Context) ([]AccountRole, error) {
	rows, err := q.db.QueryContext(ctx, getAllAccountRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AccountRole{}
	for rows.Next() {
		var i AccountRole
		if err := rows.Scan(
			&i.AccountID,
			&i.RoleID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAccountRole = `-- name: InsertAccountRole :exec
INSERT INTO public.account_roles (
  account_id, role_id, created_at, created_by
) VALUES (
  $1, $2, NOW(), $3
)
`

type InsertAccountRoleParams struct {
	AccountID uuid.UUID      `json:"account_id"`
	RoleID    uuid.UUID      `json:"role_id"`
	CreatedBy sql.NullString `json:"created_by"`
}

func (q *Queries) InsertAccountRole(ctx context.Context, arg InsertAccountRoleParams) error {
	_, err := q.db.ExecContext(ctx, insertAccountRole, arg.AccountID, arg.RoleID, arg.CreatedBy)
	return err
}

const removeRoleFromAccount = `-- name: RemoveRoleFromAccount :exec
DELETE FROM public.account_roles
WHERE account_id = $1 AND role_id = $2
`

type RemoveRoleFromAccountParams struct {
	AccountID uuid.UUID `json:"account_id"`
	RoleID    uuid.UUID `json:"role_id"`
}

func (q *Queries) RemoveRoleFromAccount(ctx context.Context, arg RemoveRoleFromAccountParams) error {
	_, err := q.db.ExecContext(ctx, removeRoleFromAccount, arg.AccountID, arg.RoleID)
	return err
}

const updateAccountsRoles = `-- name: UpdateAccountsRoles :exec
UPDATE public.account_roles
SET 
    updated_at = NOW(),
    updated_by = $3
WHERE account_id = $1 AND role_id = $2
`

type UpdateAccountsRolesParams struct {
	AccountID uuid.UUID      `json:"account_id"`
	RoleID    uuid.UUID      `json:"role_id"`
	UpdatedBy sql.NullString `json:"updated_by"`
}

func (q *Queries) UpdateAccountsRoles(ctx context.Context, arg UpdateAccountsRolesParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountsRoles, arg.AccountID, arg.RoleID, arg.UpdatedBy)
	return err
}
