// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: roles.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createRole = `-- name: CreateRole :one
INSERT INTO public.roles (
  role_code, role_name, created_at, created_by
) VALUES (
  $1, $2, NOW(), $3
) RETURNING id, role_code, role_name, created_at, created_by, updated_at, updated_by
`

type CreateRoleParams struct {
	RoleCode  string         `json:"role_code"`
	RoleName  sql.NullString `json:"role_name"`
	CreatedBy sql.NullString `json:"created_by"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, arg.RoleCode, arg.RoleName, arg.CreatedBy)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.RoleCode,
		&i.RoleName,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM public.roles
WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getRole = `-- name: GetRole :one
SELECT id, role_code, role_name, created_at, created_by, updated_at, updated_by FROM public.roles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRole(ctx context.Context, id uuid.UUID) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.RoleCode,
		&i.RoleName,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getRoleByCode = `-- name: GetRoleByCode :one
SELECT id, role_code, role_name, created_at, created_by, updated_at, updated_by FROM public.roles
WHERE role_code = $1 LIMIT 1
`

func (q *Queries) GetRoleByCode(ctx context.Context, roleCode string) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByCode, roleCode)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.RoleCode,
		&i.RoleName,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT id, role_code, role_name, created_at, created_by, updated_at, updated_by FROM public.roles
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListRolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRoles(ctx context.Context, arg ListRolesParams) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.RoleCode,
			&i.RoleName,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE public.roles
SET role_code = $2, role_name = $3, updated_at = NOW(), updated_by = $4
WHERE id = $1
RETURNING id, role_code, role_name, created_at, created_by, updated_at, updated_by
`

type UpdateRoleParams struct {
	ID        uuid.UUID      `json:"id"`
	RoleCode  string         `json:"role_code"`
	RoleName  sql.NullString `json:"role_name"`
	UpdatedBy sql.NullString `json:"updated_by"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, updateRole,
		arg.ID,
		arg.RoleCode,
		arg.RoleName,
		arg.UpdatedBy,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.RoleCode,
		&i.RoleName,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}
