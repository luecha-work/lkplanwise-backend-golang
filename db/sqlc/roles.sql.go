// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: roles.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createRole = `-- name: CreateRole :one
INSERT INTO "Roles" ("Id", "RoleCode", "RoleName", "CreatedAt", "CreatedBy")
VALUES ($1, $2, $3, $4, $5)
RETURNING "Id", "RoleCode", "RoleName", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy"
`

type CreateRoleParams struct {
	Id        uuid.UUID          `json:"Id"`
	RoleCode  string             `json:"RoleCode"`
	RoleName  pgtype.Text        `json:"RoleName"`
	CreatedAt pgtype.Timestamptz `json:"CreatedAt"`
	CreatedBy pgtype.Text        `json:"CreatedBy"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole,
		arg.Id,
		arg.RoleCode,
		arg.RoleName,
		arg.CreatedAt,
		arg.CreatedBy,
	)
	var i Role
	err := row.Scan(
		&i.Id,
		&i.RoleCode,
		&i.RoleName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM "Roles" WHERE "Id" = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const getAllRoles = `-- name: GetAllRoles :many
SELECT "Id", "RoleCode", "RoleName", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy" FROM "Roles"
`

func (q *Queries) GetAllRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.Query(ctx, getAllRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.Id,
			&i.RoleCode,
			&i.RoleName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleById = `-- name: GetRoleById :one
SELECT "Id", "RoleCode", "RoleName", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy" FROM "Roles" WHERE "Id" = $1 LIMIT 1
`

func (q *Queries) GetRoleById(ctx context.Context, id uuid.UUID) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleById, id)
	var i Role
	err := row.Scan(
		&i.Id,
		&i.RoleCode,
		&i.RoleName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const updateRole = `-- name: UpdateRole :one
UPDATE "Roles"
SET 
  "RoleCode" = COALESCE($2, "RoleCode"),
  "RoleName" = COALESCE($3, "RoleName"),
  "UpdatedAt" = COALESCE($4, "UpdatedAt"),
  "UpdatedBy" = COALESCE($5, "UpdatedBy")
WHERE "Id" = $1
RETURNING "Id", "RoleCode", "RoleName", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy"
`

type UpdateRoleParams struct {
	Id        uuid.UUID          `json:"Id"`
	RoleCode  string             `json:"RoleCode"`
	RoleName  pgtype.Text        `json:"RoleName"`
	UpdatedAt pgtype.Timestamptz `json:"UpdatedAt"`
	UpdatedBy pgtype.Text        `json:"UpdatedBy"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, updateRole,
		arg.Id,
		arg.RoleCode,
		arg.RoleName,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	var i Role
	err := row.Scan(
		&i.Id,
		&i.RoleCode,
		&i.RoleName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
