// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: expenses.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createExpense = `-- name: CreateExpense :one
INSERT INTO "Expense" ("Id", "AccountId", "Category", "Amount", "Date", "Description", "CreatedAt", "CreatedBy")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING "Id", "AccountId", "Category", "Amount", "Date", "Description", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy"
`

type CreateExpenseParams struct {
	Id          uuid.UUID          `json:"Id"`
	AccountId   uuid.UUID          `json:"AccountId"`
	Category    pgtype.Text        `json:"Category"`
	Amount      pgtype.Numeric     `json:"Amount"`
	Date        pgtype.Timestamptz `json:"Date"`
	Description pgtype.Text        `json:"Description"`
	CreatedAt   pgtype.Timestamptz `json:"CreatedAt"`
	CreatedBy   pgtype.Text        `json:"CreatedBy"`
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (Expense, error) {
	row := q.db.QueryRow(ctx, createExpense,
		arg.Id,
		arg.AccountId,
		arg.Category,
		arg.Amount,
		arg.Date,
		arg.Description,
		arg.CreatedAt,
		arg.CreatedBy,
	)
	var i Expense
	err := row.Scan(
		&i.Id,
		&i.AccountId,
		&i.Category,
		&i.Amount,
		&i.Date,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteExpense = `-- name: DeleteExpense :exec
DELETE FROM "Expense" WHERE "Id" = $1
`

func (q *Queries) DeleteExpense(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteExpense, id)
	return err
}

const getAllExpenses = `-- name: GetAllExpenses :many
SELECT "Id", "AccountId", "Category", "Amount", "Date", "Description", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy" FROM "Expense"
`

func (q *Queries) GetAllExpenses(ctx context.Context) ([]Expense, error) {
	rows, err := q.db.Query(ctx, getAllExpenses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Expense{}
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.Id,
			&i.AccountId,
			&i.Category,
			&i.Amount,
			&i.Date,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpenseById = `-- name: GetExpenseById :one
SELECT "Id", "AccountId", "Category", "Amount", "Date", "Description", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy" FROM "Expense" WHERE "Id" = $1
`

func (q *Queries) GetExpenseById(ctx context.Context, id uuid.UUID) (Expense, error) {
	row := q.db.QueryRow(ctx, getExpenseById, id)
	var i Expense
	err := row.Scan(
		&i.Id,
		&i.AccountId,
		&i.Category,
		&i.Amount,
		&i.Date,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const updateExpense = `-- name: UpdateExpense :one
UPDATE "Expense"
SET 
  "Category" = COALESCE($2, "Category"),
  "Amount" = COALESCE($3, "Amount"),
  "Date" = COALESCE($4, "Date"),
  "Description" = COALESCE($5, "Description"),
  "UpdatedAt" = COALESCE($6, "UpdatedAt"),
  "UpdatedBy" = COALESCE($7, "UpdatedBy")
WHERE "Id" = $1
RETURNING "Id", "AccountId", "Category", "Amount", "Date", "Description", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy"
`

type UpdateExpenseParams struct {
	Id          uuid.UUID          `json:"Id"`
	Category    pgtype.Text        `json:"Category"`
	Amount      pgtype.Numeric     `json:"Amount"`
	Date        pgtype.Timestamptz `json:"Date"`
	Description pgtype.Text        `json:"Description"`
	UpdatedAt   pgtype.Timestamptz `json:"UpdatedAt"`
	UpdatedBy   pgtype.Text        `json:"UpdatedBy"`
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) (Expense, error) {
	row := q.db.QueryRow(ctx, updateExpense,
		arg.Id,
		arg.Category,
		arg.Amount,
		arg.Date,
		arg.Description,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	var i Expense
	err := row.Scan(
		&i.Id,
		&i.AccountId,
		&i.Category,
		&i.Amount,
		&i.Date,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
