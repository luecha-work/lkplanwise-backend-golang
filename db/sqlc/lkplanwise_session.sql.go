// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: lkplanwise_session.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createLKPlanWiseSession = `-- name: CreateLKPlanWiseSession :one
INSERT INTO "LKPlanWiseSession" (
  "AccountId", "LoginAt", "Platform", "Os", "Browser", 
  "LoginIp", "IssuedTime", "ExpirationTime", "SessionStatus", 
  "RefreshToken", "RefreshTokenAt", "CreatedAt", "CreatedBy"
) 
VALUES (
  $1, $2, $3, $4, $5, 
  $6, $7, $8, $9, 
  $10, $11, $12, $13
) 
RETURNING "Id", "AccountId", "LoginAt", "Platform", "Os", "Browser", "LoginIp", "IssuedTime", "ExpirationTime", "SessionStatus", "RefreshToken", "RefreshTokenAt", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy"
`

type CreateLKPlanWiseSessionParams struct {
	AccountId      pgtype.UUID        `json:"AccountId"`
	LoginAt        pgtype.Timestamptz `json:"LoginAt"`
	Platform       pgtype.Text        `json:"Platform"`
	Os             pgtype.Text        `json:"Os"`
	Browser        pgtype.Text        `json:"Browser"`
	LoginIp        string             `json:"LoginIp"`
	IssuedTime     pgtype.Timestamptz `json:"IssuedTime"`
	ExpirationTime pgtype.Timestamptz `json:"ExpirationTime"`
	SessionStatus  string             `json:"SessionStatus"`
	RefreshToken   pgtype.Text        `json:"RefreshToken"`
	RefreshTokenAt pgtype.Timestamptz `json:"RefreshTokenAt"`
	CreatedAt      pgtype.Timestamptz `json:"CreatedAt"`
	CreatedBy      pgtype.Text        `json:"CreatedBy"`
}

func (q *Queries) CreateLKPlanWiseSession(ctx context.Context, arg CreateLKPlanWiseSessionParams) (LKPlanWiseSession, error) {
	row := q.db.QueryRow(ctx, createLKPlanWiseSession,
		arg.AccountId,
		arg.LoginAt,
		arg.Platform,
		arg.Os,
		arg.Browser,
		arg.LoginIp,
		arg.IssuedTime,
		arg.ExpirationTime,
		arg.SessionStatus,
		arg.RefreshToken,
		arg.RefreshTokenAt,
		arg.CreatedAt,
		arg.CreatedBy,
	)
	var i LKPlanWiseSession
	err := row.Scan(
		&i.Id,
		&i.AccountId,
		&i.LoginAt,
		&i.Platform,
		&i.Os,
		&i.Browser,
		&i.LoginIp,
		&i.IssuedTime,
		&i.ExpirationTime,
		&i.SessionStatus,
		&i.RefreshToken,
		&i.RefreshTokenAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteLKPlanWiseSession = `-- name: DeleteLKPlanWiseSession :one
DELETE FROM "LKPlanWiseSession"
WHERE "Id" = $1
RETURNING "Id", "AccountId", "LoginAt", "Platform", "Os", "Browser", "LoginIp", "IssuedTime", "ExpirationTime", "SessionStatus", "RefreshToken", "RefreshTokenAt", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy"
`

func (q *Queries) DeleteLKPlanWiseSession(ctx context.Context, id uuid.UUID) (LKPlanWiseSession, error) {
	row := q.db.QueryRow(ctx, deleteLKPlanWiseSession, id)
	var i LKPlanWiseSession
	err := row.Scan(
		&i.Id,
		&i.AccountId,
		&i.LoginAt,
		&i.Platform,
		&i.Os,
		&i.Browser,
		&i.LoginIp,
		&i.IssuedTime,
		&i.ExpirationTime,
		&i.SessionStatus,
		&i.RefreshToken,
		&i.RefreshTokenAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getLKPlanWiseSessionById = `-- name: GetLKPlanWiseSessionById :one
SELECT "Id", "AccountId", "LoginAt", "Platform", "Os", "Browser", "LoginIp", "IssuedTime", "ExpirationTime", "SessionStatus", "RefreshToken", "RefreshTokenAt", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy" 
FROM "LKPlanWiseSession" 
WHERE "Id" = $1 LIMIT 1
`

func (q *Queries) GetLKPlanWiseSessionById(ctx context.Context, id uuid.UUID) (LKPlanWiseSession, error) {
	row := q.db.QueryRow(ctx, getLKPlanWiseSessionById, id)
	var i LKPlanWiseSession
	err := row.Scan(
		&i.Id,
		&i.AccountId,
		&i.LoginAt,
		&i.Platform,
		&i.Os,
		&i.Browser,
		&i.LoginIp,
		&i.IssuedTime,
		&i.ExpirationTime,
		&i.SessionStatus,
		&i.RefreshToken,
		&i.RefreshTokenAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getLKPlanWiseSessionForAuth = `-- name: GetLKPlanWiseSessionForAuth :one
SELECT "Id", "AccountId", "LoginAt", "Platform", "Os", "Browser", "LoginIp", "IssuedTime", "ExpirationTime", "SessionStatus", "RefreshToken", "RefreshTokenAt", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy" 
FROM "LKPlanWiseSession" 
WHERE "AccountId" = $1 AND "LoginIp" = $2 LIMIT 1
`

type GetLKPlanWiseSessionForAuthParams struct {
	AccountId pgtype.UUID `json:"AccountId"`
	LoginIp   string      `json:"LoginIp"`
}

func (q *Queries) GetLKPlanWiseSessionForAuth(ctx context.Context, arg GetLKPlanWiseSessionForAuthParams) (LKPlanWiseSession, error) {
	row := q.db.QueryRow(ctx, getLKPlanWiseSessionForAuth, arg.AccountId, arg.LoginIp)
	var i LKPlanWiseSession
	err := row.Scan(
		&i.Id,
		&i.AccountId,
		&i.LoginAt,
		&i.Platform,
		&i.Os,
		&i.Browser,
		&i.LoginIp,
		&i.IssuedTime,
		&i.ExpirationTime,
		&i.SessionStatus,
		&i.RefreshToken,
		&i.RefreshTokenAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const updateLKPlanWiseSession = `-- name: UpdateLKPlanWiseSession :one
UPDATE "LKPlanWiseSession"
SET 
  "AccountId" = COALESCE($1, "AccountId"),
  "LoginAt" = COALESCE($2, "LoginAt"),
  "Platform" = COALESCE($3, "Platform"),
  "Os" = COALESCE($4, "Os"),
  "Browser" = COALESCE($5, "Browser"),
  "LoginIp" = COALESCE($6, "LoginIp"),
  "IssuedTime" = COALESCE($7, "IssuedTime"),
  "ExpirationTime" = COALESCE($8, "ExpirationTime"),
  "SessionStatus" = COALESCE($9, "SessionStatus"),
  "RefreshToken" = COALESCE($10, "RefreshToken"),
  "RefreshTokenAt" = COALESCE($11, "RefreshTokenAt"),
  "UpdatedAt" = COALESCE($12, "UpdatedAt"),
  "UpdatedBy" = COALESCE($13, "UpdatedBy")
WHERE "Id" = $14
RETURNING "Id", "AccountId", "LoginAt", "Platform", "Os", "Browser", "LoginIp", "IssuedTime", "ExpirationTime", "SessionStatus", "RefreshToken", "RefreshTokenAt", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy"
`

type UpdateLKPlanWiseSessionParams struct {
	Accountid      pgtype.UUID        `json:"accountid"`
	Loginat        pgtype.Timestamptz `json:"loginat"`
	Platform       pgtype.Text        `json:"platform"`
	Os             pgtype.Text        `json:"os"`
	Browser        pgtype.Text        `json:"browser"`
	Loginip        pgtype.Text        `json:"loginip"`
	Issuedtime     pgtype.Timestamptz `json:"issuedtime"`
	Expirationtime pgtype.Timestamptz `json:"expirationtime"`
	Sessionstatus  pgtype.Text        `json:"sessionstatus"`
	Refreshtoken   pgtype.Text        `json:"refreshtoken"`
	Refreshtokenat pgtype.Timestamptz `json:"refreshtokenat"`
	Updatedat      pgtype.Timestamptz `json:"updatedat"`
	Updatedby      pgtype.Text        `json:"updatedby"`
	ID             uuid.UUID          `json:"id"`
}

func (q *Queries) UpdateLKPlanWiseSession(ctx context.Context, arg UpdateLKPlanWiseSessionParams) (LKPlanWiseSession, error) {
	row := q.db.QueryRow(ctx, updateLKPlanWiseSession,
		arg.Accountid,
		arg.Loginat,
		arg.Platform,
		arg.Os,
		arg.Browser,
		arg.Loginip,
		arg.Issuedtime,
		arg.Expirationtime,
		arg.Sessionstatus,
		arg.Refreshtoken,
		arg.Refreshtokenat,
		arg.Updatedat,
		arg.Updatedby,
		arg.ID,
	)
	var i LKPlanWiseSession
	err := row.Scan(
		&i.Id,
		&i.AccountId,
		&i.LoginAt,
		&i.Platform,
		&i.Os,
		&i.Browser,
		&i.LoginIp,
		&i.IssuedTime,
		&i.ExpirationTime,
		&i.SessionStatus,
		&i.RefreshToken,
		&i.RefreshTokenAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
