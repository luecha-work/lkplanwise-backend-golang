// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: goals.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createGoal = `-- name: CreateGoal :one
INSERT INTO "Goal" ("Id", "AccountId", "GoalType", "TargetAmount", "CurrentAmount", "Deadline", "Progress", "CreatedAt", "CreatedBy")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING "Id", "AccountId", "GoalType", "TargetAmount", "CurrentAmount", "Deadline", "Progress", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy"
`

type CreateGoalParams struct {
	Id            uuid.UUID          `json:"Id"`
	AccountId     uuid.UUID          `json:"AccountId"`
	GoalType      pgtype.Text        `json:"GoalType"`
	TargetAmount  pgtype.Numeric     `json:"TargetAmount"`
	CurrentAmount pgtype.Numeric     `json:"CurrentAmount"`
	Deadline      pgtype.Timestamptz `json:"Deadline"`
	Progress      pgtype.Numeric     `json:"Progress"`
	CreatedAt     pgtype.Timestamptz `json:"CreatedAt"`
	CreatedBy     pgtype.Text        `json:"CreatedBy"`
}

func (q *Queries) CreateGoal(ctx context.Context, arg CreateGoalParams) (Goal, error) {
	row := q.db.QueryRow(ctx, createGoal,
		arg.Id,
		arg.AccountId,
		arg.GoalType,
		arg.TargetAmount,
		arg.CurrentAmount,
		arg.Deadline,
		arg.Progress,
		arg.CreatedAt,
		arg.CreatedBy,
	)
	var i Goal
	err := row.Scan(
		&i.Id,
		&i.AccountId,
		&i.GoalType,
		&i.TargetAmount,
		&i.CurrentAmount,
		&i.Deadline,
		&i.Progress,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteGoal = `-- name: DeleteGoal :exec
DELETE FROM "Goal" WHERE "Id" = $1
`

func (q *Queries) DeleteGoal(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteGoal, id)
	return err
}

const getAllGoals = `-- name: GetAllGoals :many
SELECT "Id", "AccountId", "GoalType", "TargetAmount", "CurrentAmount", "Deadline", "Progress", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy" FROM "Goal"
`

func (q *Queries) GetAllGoals(ctx context.Context) ([]Goal, error) {
	rows, err := q.db.Query(ctx, getAllGoals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Goal{}
	for rows.Next() {
		var i Goal
		if err := rows.Scan(
			&i.Id,
			&i.AccountId,
			&i.GoalType,
			&i.TargetAmount,
			&i.CurrentAmount,
			&i.Deadline,
			&i.Progress,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGoalById = `-- name: GetGoalById :one
SELECT "Id", "AccountId", "GoalType", "TargetAmount", "CurrentAmount", "Deadline", "Progress", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy" FROM "Goal" WHERE "Id" = $1 LIMIT 1
`

func (q *Queries) GetGoalById(ctx context.Context, id uuid.UUID) (Goal, error) {
	row := q.db.QueryRow(ctx, getGoalById, id)
	var i Goal
	err := row.Scan(
		&i.Id,
		&i.AccountId,
		&i.GoalType,
		&i.TargetAmount,
		&i.CurrentAmount,
		&i.Deadline,
		&i.Progress,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const updateGoal = `-- name: UpdateGoal :one
UPDATE "Goal"
SET 
  "GoalType" = COALESCE($2, "GoalType"),
  "TargetAmount" = COALESCE($3, "TargetAmount"),
  "CurrentAmount" = COALESCE($4, "CurrentAmount"),
  "Deadline" = COALESCE($5, "Deadline"),
  "Progress" = COALESCE($6, "Progress"),
  "UpdatedAt" = COALESCE($7, "UpdatedAt"),
  "UpdatedBy" = COALESCE($8, "UpdatedBy")
WHERE "Id" = $1
RETURNING "Id", "AccountId", "GoalType", "TargetAmount", "CurrentAmount", "Deadline", "Progress", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy"
`

type UpdateGoalParams struct {
	Id            uuid.UUID          `json:"Id"`
	GoalType      pgtype.Text        `json:"GoalType"`
	TargetAmount  pgtype.Numeric     `json:"TargetAmount"`
	CurrentAmount pgtype.Numeric     `json:"CurrentAmount"`
	Deadline      pgtype.Timestamptz `json:"Deadline"`
	Progress      pgtype.Numeric     `json:"Progress"`
	UpdatedAt     pgtype.Timestamptz `json:"UpdatedAt"`
	UpdatedBy     pgtype.Text        `json:"UpdatedBy"`
}

func (q *Queries) UpdateGoal(ctx context.Context, arg UpdateGoalParams) (Goal, error) {
	row := q.db.QueryRow(ctx, updateGoal,
		arg.Id,
		arg.GoalType,
		arg.TargetAmount,
		arg.CurrentAmount,
		arg.Deadline,
		arg.Progress,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	var i Goal
	err := row.Scan(
		&i.Id,
		&i.AccountId,
		&i.GoalType,
		&i.TargetAmount,
		&i.CurrentAmount,
		&i.Deadline,
		&i.Progress,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
