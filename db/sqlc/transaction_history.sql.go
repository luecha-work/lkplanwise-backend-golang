// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transaction_history.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO "TransactionHistory" ("Id", "AccountId", "TransactionType", "Amount", "Description", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING "Id", "AccountId", "TransactionType", "Amount", "Description", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy"
`

type CreateTransactionParams struct {
	Id              uuid.UUID          `json:"Id"`
	AccountId       uuid.UUID          `json:"AccountId"`
	TransactionType pgtype.Text        `json:"TransactionType"`
	Amount          pgtype.Numeric     `json:"Amount"`
	Description     pgtype.Text        `json:"Description"`
	CreatedAt       pgtype.Timestamptz `json:"CreatedAt"`
	UpdatedAt       pgtype.Timestamptz `json:"UpdatedAt"`
	CreatedBy       pgtype.Text        `json:"CreatedBy"`
	UpdatedBy       pgtype.Text        `json:"UpdatedBy"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (TransactionHistory, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.Id,
		arg.AccountId,
		arg.TransactionType,
		arg.Amount,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i TransactionHistory
	err := row.Scan(
		&i.Id,
		&i.AccountId,
		&i.TransactionType,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM "TransactionHistory" WHERE "Id" = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTransaction, id)
	return err
}

const getAllTransactions = `-- name: GetAllTransactions :many
SELECT "Id", "AccountId", "TransactionType", "Amount", "Description", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy" FROM "TransactionHistory"
`

func (q *Queries) GetAllTransactions(ctx context.Context) ([]TransactionHistory, error) {
	rows, err := q.db.Query(ctx, getAllTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TransactionHistory{}
	for rows.Next() {
		var i TransactionHistory
		if err := rows.Scan(
			&i.Id,
			&i.AccountId,
			&i.TransactionType,
			&i.Amount,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionById = `-- name: GetTransactionById :one
SELECT "Id", "AccountId", "TransactionType", "Amount", "Description", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy" FROM "TransactionHistory" WHERE "Id" = $1
`

func (q *Queries) GetTransactionById(ctx context.Context, id uuid.UUID) (TransactionHistory, error) {
	row := q.db.QueryRow(ctx, getTransactionById, id)
	var i TransactionHistory
	err := row.Scan(
		&i.Id,
		&i.AccountId,
		&i.TransactionType,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE "TransactionHistory"
SET "TransactionType" = $2, "Amount" = $3, "Description" = $4, "UpdatedAt" = $5, "UpdatedBy" = $6
WHERE "Id" = $1
RETURNING "Id", "AccountId", "TransactionType", "Amount", "Description", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy"
`

type UpdateTransactionParams struct {
	Id              uuid.UUID          `json:"Id"`
	TransactionType pgtype.Text        `json:"TransactionType"`
	Amount          pgtype.Numeric     `json:"Amount"`
	Description     pgtype.Text        `json:"Description"`
	UpdatedAt       pgtype.Timestamptz `json:"UpdatedAt"`
	UpdatedBy       pgtype.Text        `json:"UpdatedBy"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (TransactionHistory, error) {
	row := q.db.QueryRow(ctx, updateTransaction,
		arg.Id,
		arg.TransactionType,
		arg.Amount,
		arg.Description,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	var i TransactionHistory
	err := row.Scan(
		&i.Id,
		&i.AccountId,
		&i.TransactionType,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
