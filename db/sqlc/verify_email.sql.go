// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: verify_email.sql

package db

import (
	"context"
)

const createVerifyEmail = `-- name: CreateVerifyEmail :one
INSERT INTO "VerifyEmails" (
    "UserName",
    "Email",
    "SecretCode"
) VALUES (
    $1, $2, $3
) RETURNING "Id", "UserName", "Email", "SecretCode", "IsUsed", "CreatedAt", "ExpiredAt"
`

type CreateVerifyEmailParams struct {
	UserName   string `json:"UserName"`
	Email      string `json:"Email"`
	SecretCode string `json:"SecretCode"`
}

func (q *Queries) CreateVerifyEmail(ctx context.Context, arg CreateVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, createVerifyEmail, arg.UserName, arg.Email, arg.SecretCode)
	var i VerifyEmail
	err := row.Scan(
		&i.Id,
		&i.UserName,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const updateVerifyEmail = `-- name: UpdateVerifyEmail :one
UPDATE "VerifyEmails"
SET
    "IsUsed" = TRUE
WHERE
    "Id" = $1
    AND "SecretCode" = $2
    AND "IsUsed" = FALSE
    AND "ExpiredAt" > now()
RETURNING "Id", "UserName", "Email", "SecretCode", "IsUsed", "CreatedAt", "ExpiredAt"
`

type UpdateVerifyEmailParams struct {
	ID         int64  `json:"id"`
	Secretcode string `json:"secretcode"`
}

func (q *Queries) UpdateVerifyEmail(ctx context.Context, arg UpdateVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, updateVerifyEmail, arg.ID, arg.Secretcode)
	var i VerifyEmail
	err := row.Scan(
		&i.Id,
		&i.UserName,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
