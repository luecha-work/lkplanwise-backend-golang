// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: block_bruteforce.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createBlockBruteForce = `-- name: CreateBlockBruteForce :one
INSERT INTO "BlockBruteForce" (
  "Email", "Count", "Status", 
  "LockedTime", "UnLockTime", "CreatedAt", "CreatedBy"
) 
VALUES (
  $1, $2, $3, 
  $4, $5, $6, $7
)
RETURNING "Id", "Email", "Count", "Status", "LockedTime", "UnLockTime", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy"
`

type CreateBlockBruteForceParams struct {
	Email      string             `json:"Email"`
	Count      pgtype.Int4        `json:"Count"`
	Status     string             `json:"Status"`
	LockedTime pgtype.Timestamptz `json:"LockedTime"`
	UnLockTime pgtype.Timestamptz `json:"UnLockTime"`
	CreatedAt  pgtype.Timestamptz `json:"CreatedAt"`
	CreatedBy  pgtype.Text        `json:"CreatedBy"`
}

func (q *Queries) CreateBlockBruteForce(ctx context.Context, arg CreateBlockBruteForceParams) (BlockBruteForce, error) {
	row := q.db.QueryRow(ctx, createBlockBruteForce,
		arg.Email,
		arg.Count,
		arg.Status,
		arg.LockedTime,
		arg.UnLockTime,
		arg.CreatedAt,
		arg.CreatedBy,
	)
	var i BlockBruteForce
	err := row.Scan(
		&i.Id,
		&i.Email,
		&i.Count,
		&i.Status,
		&i.LockedTime,
		&i.UnLockTime,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteBlockBruteForce = `-- name: DeleteBlockBruteForce :one
DELETE FROM "BlockBruteForce"
WHERE "Id" = $1
RETURNING "Id", "Email", "Count", "Status", "LockedTime", "UnLockTime", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy"
`

func (q *Queries) DeleteBlockBruteForce(ctx context.Context, id uuid.UUID) (BlockBruteForce, error) {
	row := q.db.QueryRow(ctx, deleteBlockBruteForce, id)
	var i BlockBruteForce
	err := row.Scan(
		&i.Id,
		&i.Email,
		&i.Count,
		&i.Status,
		&i.LockedTime,
		&i.UnLockTime,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getBlockBruteForceById = `-- name: GetBlockBruteForceById :one
SELECT "Id", "Email", "Count", "Status", "LockedTime", "UnLockTime", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy" 
FROM "BlockBruteForce" 
WHERE "Id" = $1
`

func (q *Queries) GetBlockBruteForceById(ctx context.Context, id uuid.UUID) (BlockBruteForce, error) {
	row := q.db.QueryRow(ctx, getBlockBruteForceById, id)
	var i BlockBruteForce
	err := row.Scan(
		&i.Id,
		&i.Email,
		&i.Count,
		&i.Status,
		&i.LockedTime,
		&i.UnLockTime,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const updateBlockBruteForce = `-- name: UpdateBlockBruteForce :one
UPDATE "BlockBruteForce"
SET 
  "Email" = COALESCE($2, "Email"),
  "Count" = COALESCE($3, "Count"),
  "Status" = COALESCE($4, "Status"),
  "LockedTime" = COALESCE($5, "LockedTime"),
  "UnLockTime" = COALESCE($6, "UnLockTime"),
  "UpdatedAt" = COALESCE($7, "UpdatedAt"),
  "UpdatedBy" = COALESCE($8, "UpdatedBy")
WHERE "Id" = $1
RETURNING "Id", "Email", "Count", "Status", "LockedTime", "UnLockTime", "CreatedAt", "UpdatedAt", "CreatedBy", "UpdatedBy"
`

type UpdateBlockBruteForceParams struct {
	Id         uuid.UUID          `json:"Id"`
	Email      string             `json:"Email"`
	Count      pgtype.Int4        `json:"Count"`
	Status     string             `json:"Status"`
	LockedTime pgtype.Timestamptz `json:"LockedTime"`
	UnLockTime pgtype.Timestamptz `json:"UnLockTime"`
	UpdatedAt  pgtype.Timestamptz `json:"UpdatedAt"`
	UpdatedBy  pgtype.Text        `json:"UpdatedBy"`
}

func (q *Queries) UpdateBlockBruteForce(ctx context.Context, arg UpdateBlockBruteForceParams) (BlockBruteForce, error) {
	row := q.db.QueryRow(ctx, updateBlockBruteForce,
		arg.Id,
		arg.Email,
		arg.Count,
		arg.Status,
		arg.LockedTime,
		arg.UnLockTime,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	var i BlockBruteForce
	err := row.Scan(
		&i.Id,
		&i.Email,
		&i.Count,
		&i.Status,
		&i.LockedTime,
		&i.UnLockTime,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
